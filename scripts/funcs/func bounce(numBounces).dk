# func bounce(numBounces)

let border = 0.0;
let xLow = border + getX(gameOffset);
let xHigh = border + gameWidth + getX(gameOffset);
let yLow = border + getY(gameOffset);

func isAngleRight(angle){
    return angle <= 90.0 | angle >= 270.0;
}
func isAngleLeft(angle){
    return angle >= 90.0 & angle <= 270.0;
}
func isAngleUp(angle){
    return angle <= 180.0;
}

func flipVelocityX(){
    let oldVelocity = entityVelocity();
    let newVelocity = setTheta(oldVelocity, flipY(getTheta(oldVelocity))); #flip across y axis
    setVelocity(newVelocity);
}

func flipVelocityY(){
    let oldVelocity = entityVelocity();
    let newVelocity = setTheta(oldVelocity, flipX(getTheta(oldVelocity))); # flip across x axis
    setVelocity(newVelocity);
}

let x;
let y;
let angle;
while(numBounces > 0){
    x = entityX();
    y = entityY();
    angle = entityAngle();

    if(x < xLow & isAngleLeft(angle)){
        flipVelocityX();
        numBounces = numBounces - 1;
    }
    else if(x > xHigh & isAngleRight(angle)){
        flipVelocityX();
        numBounces = numBounces - 1;
    }
    if(numBounces > 0 & y < yLow & isAngleUp(angle)){
        flipVelocityY();
        numBounces = numBounces - 1;
    }
    stall();
}